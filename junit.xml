<testsuites name="jest tests" tests="31" failures="0" time="0.995">
  <testsuite name="Base controller" errors="0" failures="0" skipped="0" timestamp="2019-01-07T22:19:20" time="0.317" tests="28">
    <testcase classname="Base controller Should resolve to a function as classes do" name="Base controller Should resolve to a function as classes do" time="0.003">
    </testcase>
    <testcase classname="Base controller Should contain an HTTP property that has a list of status codes" name="Base controller Should contain an HTTP property that has a list of status codes" time="0.003">
    </testcase>
    <testcase classname="Base controller Should have the required methods on the class" name="Base controller Should have the required methods on the class" time="0.001">
    </testcase>
    <testcase classname="Base controller getLogLevelFromStatusCode should act as expected" name="Base controller getLogLevelFromStatusCode should act as expected" time="0.001">
    </testcase>
    <testcase classname="Base controller createResponseModel should log an info and return a response object on 200" name="Base controller createResponseModel should log an info and return a response object on 200" time="0.002">
    </testcase>
    <testcase classname="Base controller createResponseModel should log an info and return a response object on 300" name="Base controller createResponseModel should log an info and return a response object on 300" time="0">
    </testcase>
    <testcase classname="Base controller createResponseModel should log a warn and return a response object on 400" name="Base controller createResponseModel should log a warn and return a response object on 400" time="0">
    </testcase>
    <testcase classname="Base controller createResponseModel should log an error and return a response object on 500" name="Base controller createResponseModel should log an error and return a response object on 500" time="0.001">
    </testcase>
    <testcase classname="Base controller createSuccessResponse should act as expected" name="Base controller createSuccessResponse should act as expected" time="0">
    </testcase>
    <testcase classname="Base controller createErrorResponse should act as expected" name="Base controller createErrorResponse should act as expected" time="0">
    </testcase>
    <testcase classname="Base controller createUnexpectedErrorResponse should act as expected" name="Base controller createUnexpectedErrorResponse should act as expected" time="0.001">
    </testcase>
    <testcase classname="Base controller handleServiceErrors should act as expected when given BadRequestError" name="Base controller handleServiceErrors should act as expected when given BadRequestError" time="0">
    </testcase>
    <testcase classname="Base controller handleServiceErrors should act as expected when given UnauthorizedError" name="Base controller handleServiceErrors should act as expected when given UnauthorizedError" time="0.001">
    </testcase>
    <testcase classname="Base controller handleServiceErrors should act as expected when given ConflictError" name="Base controller handleServiceErrors should act as expected when given ConflictError" time="0">
    </testcase>
    <testcase classname="Base controller handleServiceErrors should act as expected when given ProxyError" name="Base controller handleServiceErrors should act as expected when given ProxyError" time="0.001">
    </testcase>
    <testcase classname="Base controller handleServiceErrors should act as expected when given BadAccountError" name="Base controller handleServiceErrors should act as expected when given BadAccountError" time="0">
    </testcase>
    <testcase classname="Base controller handleServiceErrors should act as expected when given ForbiddenError" name="Base controller handleServiceErrors should act as expected when given ForbiddenError" time="0.001">
    </testcase>
    <testcase classname="Base controller handleServiceErrors should act as expected when given NotFoundError" name="Base controller handleServiceErrors should act as expected when given NotFoundError" time="0">
    </testcase>
    <testcase classname="Base controller handleServiceErrors should act as expected when given ServiceUnavailableError" name="Base controller handleServiceErrors should act as expected when given ServiceUnavailableError" time="0">
    </testcase>
    <testcase classname="Base controller handleServiceErrors should act as expected when given NotAcceptableError" name="Base controller handleServiceErrors should act as expected when given NotAcceptableError" time="0.001">
    </testcase>
    <testcase classname="Base controller handleServiceErrors should handle errors as expected when given an unexpected error" name="Base controller handleServiceErrors should handle errors as expected when given an unexpected error" time="0">
    </testcase>
    <testcase classname="Base controller verifyRequiredParameters should throw on bad json in the body" name="Base controller verifyRequiredParameters should throw on bad json in the body" time="0.001">
    </testcase>
    <testcase classname="Base controller verifyRequiredParameters should throw on bad json in the correlationId" name="Base controller verifyRequiredParameters should throw on bad json in the correlationId" time="0">
    </testcase>
    <testcase classname="Base controller verifyRequiredParameters should pass hold errors and return them for props not found in the body" name="Base controller verifyRequiredParameters should pass hold errors and return them for props not found in the body" time="0.001">
    </testcase>
    <testcase classname="Base controller verifyRequiredParameters throws when required query string doesn&apos;t exist" name="Base controller verifyRequiredParameters throws when required query string doesn&apos;t exist" time="0">
    </testcase>
    <testcase classname="Base controller verifyRequiredParameters doesn&apos;t throw on happy path for both body and query strings" name="Base controller verifyRequiredParameters doesn&apos;t throw on happy path for both body and query strings" time="0">
    </testcase>
    <testcase classname="Base controller verifyRequiredParameters throws on no headers in the event object" name="Base controller verifyRequiredParameters throws on no headers in the event object" time="0">
    </testcase>
    <testcase classname="Base controller verifyRequiredParameters throws when there is no query string" name="Base controller verifyRequiredParameters throws when there is no query string" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Errors tests" errors="0" failures="0" skipped="0" timestamp="2019-01-07T22:19:21" time="0.073" tests="3">
    <testcase classname="Errors tests Should be an object" name="Errors tests Should be an object" time="0.001">
    </testcase>
    <testcase classname="Errors tests Should have expected error Objects" name="Errors tests Should have expected error Objects" time="0.002">
    </testcase>
    <testcase classname="Errors tests Should have a stack and a message in the error object" name="Errors tests Should have a stack and a message in the error object" time="0.002">
    </testcase>
  </testsuite>
</testsuites>